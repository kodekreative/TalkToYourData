import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
import streamlit as st
from sql_query_generation import generate_sql_query, run_sql_query

class ExecutiveSummaryVisualization:

    def plot_publisher_revenue(self):
        """Create a bar chart showing total revenue by publisher"""
        publisher_revenue_query = """
            I want you to find the total revenue generated by each publisher and sort them by revenue.
            Resultant columns name should be
                -   PUBLISHER
                -   TOTAL_REVENUE
        """
        query = generate_sql_query(publisher_revenue_query)
        rows = run_sql_query(query)
        revenue_by_publisher = pd.DataFrame(rows)

        fig = px.bar(
            revenue_by_publisher,
            x='PUBLISHER',
            y='TOTAL_REVENUE',
            title='Total Revenue by Publisher',
            labels={'REVENUE': 'Total Revenue ($)', 'PUBLISHER': 'Publisher'},
            color='TOTAL_REVENUE',
            color_continuous_scale='Viridis'
        )
        fig.update_layout(
            xaxis_tickangle=-45,
            showlegend=False,
            height=500
        )
        return fig

    def plot_billable_analysis(self):
        """
        Analyze billable/non-billable leads by publisher with quality threshold
        Returns two plots: percentage and count visualizations
        """
        billable_analysis_query = """
            I want to analyze the billable status of leads by publisher. 
            Please show me for each publisher:
                1. The count of leads
                2. The percentage of leads that are billable vs non-billable
                3. Grouped by publisher and billable status
                4. With percentages calculated as a portion of each publisher's total leads
            OUTPUT COLUMN NAMES:
                - PUBLISHER
                - BILLABLE
                - LEAD COUNT
                - PERCENTAGE
        """
        query = generate_sql_query(billable_analysis_query)
        data = pd.DataFrame(run_sql_query(query))

        # Calculate statistics for summary
        total_leads = data['LEAD COUNT'].sum()
        total_billable = data[data['BILLABLE'] == 'Yes']['LEAD COUNT'].sum()
        overall_billable_rate = (total_billable / total_leads) * 100
        billable_rates = data.pivot(index='PUBLISHER', columns='BILLABLE', values='PERCENTAGE').fillna(0)
        billable_rates['healthy'] = billable_rates['Yes'] >= 70
        problem_publishers = billable_rates[~billable_rates['healthy']].index.tolist()

        st.dataframe(data)

        summary = f"""
            ### Billable Lead Analysis Summary
            
            **Overall Statistics:**
            - üìä Total leads analyzed: {total_leads:,}
            - ‚úÖ Billable leads: {total_billable:,} ({overall_billable_rate:.1f}%)
            - üö® Non-billable leads: {total_leads - total_billable:,} ({100 - overall_billable_rate:.1f}%)
            
            **Publisher Performance:**
            - üéØ Healthy publishers (‚â•70% billable): {len(billable_rates[billable_rates['healthy']])}
            - ‚ö†Ô∏è Problem publishers (<70% billable): {len(problem_publishers)}
            {"    - " + ", ".join(problem_publishers) if problem_publishers else "    - All publishers meet quality standards"}
            
            **Key Insights:**
            - The orange dotted line shows our 70% quality threshold
            - Publishers highlighted in red need immediate review
            - Left chart shows percentages - focus on relative performance
            - Right chart shows volumes - identify high-impact issues
        """

        st.markdown(summary)
        
        # Calculate overall billable rate per publisher
        billable_rates = data.pivot(index='PUBLISHER', columns='BILLABLE', values='PERCENTAGE').fillna(0)
        billable_rates['healthy'] = billable_rates['Yes'] >= 70
        
        # Create subplots (1 row, 2 columns)
        fig = make_subplots(
            rows=1, cols=2,
            subplot_titles=(
                'Billable Percentage by Publisher', 
                'Lead Count by Billable Status'
            ),
            horizontal_spacing=0.15
        )
        
        # Percentage Plot (Left)
        for billable_status in ['Yes', 'No']:
            subset = data[data['BILLABLE'] == billable_status]
            fig.add_trace(
                go.Bar(
                    x=subset['PUBLISHER'],
                    y=subset['PERCENTAGE'],
                    name=f'Billable: {billable_status}',
                    marker_color='#2ca02c' if billable_status == 'Yes' else '#d62728',
                    showlegend=True
                ),
                row=1, col=1
            )
        
        # Count Plot (Right)
        for billable_status in ['Yes', 'No']:
            subset = data[data['BILLABLE'] == billable_status]
            fig.add_trace(
                go.Bar(
                    x=subset['PUBLISHER'],
                    y=subset['LEAD COUNT'],
                    name=f'Billable: {billable_status}',
                    marker_color='#2ca02c' if billable_status == 'Yes' else '#d62728',
                    showlegend=False  # Only show legend once
                ),
                row=1, col=2
            )
        
        # Add threshold line to PERCENTAGE plot
        fig.add_hline(
            y=70,
            line_dash="dot",
            annotation_text="70% Threshold",
            line_color="orange",
            row=1, col=1
        )
        
        # Highlight problematic publishers
        for i, publisher in enumerate(billable_rates.index):
            if not billable_rates.loc[publisher, 'healthy']:
                fig.add_vrect(
                    x0=i-0.5, x1=i+0.5,
                    fillcolor="red", opacity=0.1,
                    line_width=0,
                    row=1, col=1
                )
                fig.add_vrect(
                    x0=i-0.5, x1=i+0.5,
                    fillcolor="red", opacity=0.1,
                    line_width=0,
                    row=1, col=2
                )
        
        # Update layout
        fig.update_layout(
            height=500,
            legend_title_text='Billable Status',
            xaxis_tickangle=-45,
            xaxis2_tickangle=-45,
            hovermode='closest',
            margin=dict(l=50, r=50, b=100, t=50, pad=4)
        )
        
        # Update axis labels
        fig.update_yaxes(title_text="Percentage of Leads", row=1, col=1)
        fig.update_yaxes(title_text="Number of Leads", row=1, col=2)
        
        return fig
    
    def display_all_visualizations(self):
        """Display all visualizations in Streamlit"""
        st.title('Revenue Analysis Dashboard')

        st.header('Publisher Revenue Analysis')
        st.plotly_chart(self.plot_publisher_revenue(), use_container_width=True)

        st.header('Billable Lead Analysis by Publisher')
        st.plotly_chart(self.plot_billable_analysis(), use_container_width=True)
